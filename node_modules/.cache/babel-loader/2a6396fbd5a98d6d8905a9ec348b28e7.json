{"remainingRequest":"/Users/chenyiding/TMS/CY/EP/node_modules/thread-loader/dist/cjs.js!/Users/chenyiding/TMS/CY/EP/node_modules/babel-loader/lib/index.js!/Users/chenyiding/TMS/CY/EP/node_modules/eslint-loader/index.js??ref--13-0!/Users/chenyiding/TMS/CY/EP/src/utils/axios.js","dependencies":[{"path":"/Users/chenyiding/TMS/CY/EP/src/utils/axios.js","mtime":1596203466781},{"path":"/Users/chenyiding/TMS/CY/EP/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyiding/TMS/CY/EP/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenyiding/TMS/CY/EP/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenyiding/TMS/CY/EP/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport axios from 'axios';\nimport router from \"../routes\";\nvar baseURL = 'http://www.zjcylog.com:10002';\naxios.interceptors.request.use(function (config) {\n  config.header = {\n    'X-Requested-With': 'XMLHttpRequest',\n    'Content-Type': 'application/json;charset=UTF-8',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST,GET,PUT,DELETE',\n    'Access-Control-Allow-Headers': 'Authorization, Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, X-Requested-By, If-Modified-Since, X-File-Name, X-File-Type, Cache-Control, Origin',\n    'access-control-expose-headers': 'Authorization'\n  };\n  var current_href = window.location.href;\n\n  if (current_href.indexOf('login') > -1) {// console.log('登录页面')\n  } else {\n    var token = localStorage.getItem('token');\n\n    if (token) {\n      config.headers['Authorization'] = \"Bearer \".concat(token);\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(function (response) {\n  // 检测某种状态进行重定向 !!!!!\n  // if (response.status === 302) {\n  //   Router.push({\n  //     name: 'home'\n  //   })\n  // }\n  return response;\n}, function (error) {\n  return Promise.resolve(error.response);\n});\n\nvar checkStatus = function checkStatus(response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    // 如果不需要除了data之外的数据，可以直接 return response.data\n    return response.data;\n  } // 异常状态下，把错误信息返回去\n\n\n  return {\n    status: -404,\n    msg: '网络异常'\n  };\n};\n\nfunction checkCode(res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {\n    // console.log('请求异常, 重新登陆');\n    alert('请求异常, 重新登陆');\n    router.replace({\n      path: '/login'\n    });\n  }\n\n  if (res.data && !res.data.success) {// console.log(res)\n    // console.log(res.data.msg)\n  }\n\n  return res;\n}\n\nexport default {\n  post: function post(url, data) {\n    return axios({\n      method: 'post',\n      baseURL: baseURL,\n      url: url,\n      data: data,\n      timeout: 10000\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (res) {\n      return checkCode(res);\n    });\n  },\n  get: function get(url, params, responseType) {\n    return axios({\n      method: 'get',\n      baseURL: baseURL,\n      url: url,\n      params: params,\n      responseType: responseType ? responseType : '',\n      timeout: 10000\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (res) {\n      return checkCode(res);\n    });\n  },\n  put: function put(url, data) {\n    return axios({\n      method: 'put',\n      baseURL: baseURL,\n      url: url,\n      data: data,\n      timeout: 10000\n    }).then(function (response) {\n      return checkStatus(response);\n    }).then(function (res) {\n      return checkCode(res);\n    });\n  }\n};",{"version":3,"sources":["/Users/chenyiding/TMS/CY/EP/src/utils/axios.js"],"names":["axios","router","baseURL","interceptors","request","use","config","header","current_href","window","location","href","indexOf","token","localStorage","getItem","headers","error","Promise","reject","response","resolve","checkStatus","status","data","msg","checkCode","res","alert","replace","path","success","post","url","method","timeout","then","get","params","responseType","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport router from '../routes'\n\nconst baseURL = 'http://www.zjcylog.com:10002';\n\naxios.interceptors.request.use(config => {\n    config.header = {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json;charset=UTF-8',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST,GET,PUT,DELETE',\n        'Access-Control-Allow-Headers': 'Authorization, Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, X-Requested-By, If-Modified-Since, X-File-Name, X-File-Type, Cache-Control, Origin',\n        'access-control-expose-headers': 'Authorization'\n    }\n    const current_href = window.location.href;\n    if (current_href.indexOf('login') > -1) {\n        // console.log('登录页面')\n    } else {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`\n        }\n\n    }\n    \n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n\n    // 检测某种状态进行重定向 !!!!!\n    // if (response.status === 302) {\n    //   Router.push({\n    //     name: 'home'\n    //   })\n    // }\n    return response\n}, error => {\n    return Promise.resolve(error.response)\n})\n\nconst checkStatus = response => {\n    // loading\n    // 如果http状态码正常，则直接返回数据\n    if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n        // 如果不需要除了data之外的数据，可以直接 return response.data\n\n        return response.data\n    }\n    // 异常状态下，把错误信息返回去\n    return {\n        status: -404,\n        msg: '网络异常'\n    }\n}\n\nfunction checkCode(res) {\n    // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n    if (res.status === -404) {\n        // console.log('请求异常, 重新登陆');\n        \n        alert('请求异常, 重新登陆');\n        router.replace({\n            path: '/login'\n        })\n    }\n    if (res.data && (!res.data.success)) {\n        // console.log(res)\n        // console.log(res.data.msg)\n    }\n    return res\n}\n\nexport default {\n    post(url, data) {\n        return axios({\n            method: 'post',\n            baseURL,\n            url,\n            data,\n            timeout: 10000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    get(url, params, responseType) {\n        return axios({\n            method: 'get',\n            baseURL,\n            url,\n            params,\n            responseType: responseType ? responseType : '',\n            timeout: 10000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    put(url, data) {\n        return axios({\n            method: 'put',\n            baseURL,\n            url,\n            data,\n            timeout: 10000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    }\n}"]}]}